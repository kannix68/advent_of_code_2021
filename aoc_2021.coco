# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .coco
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.13.2
#   kernelspec:
#     display_name: Coconut
#     language: coconut
#     name: coconut
# ---

# %% [markdown]
# # Advent of Code 2021
#
# This solution (Jupyter notebook; coconut 1.5.0 on python 3.7.11) by kannix68, @ 2021-12.  \
# Using anaconda distro, conda v4.10.3, and coconut language. installation on MacOS v10.14.6 "Mojave".

# %%
import copy
import itertools
import logging
import re
import sys
import time

from collections import defaultdict

import numpy as np
import pandas as pd

import pylib.aochelper as aoc
#from pylib.aochelper import map_list as mapl
#from pylib.aochelper import filter_list as filterl

f"Python version: {sys.version}" |> print
f"Version info: {sys.version_info}" |> print

log = aoc.getLogger(__name__)
f"Initial log-level={aoc.getLogLevelName(log.getEffectiveLevel())}." |> print

# %% [markdown]
# ## Problem domain code

# %% [markdown]
# ### Day 1: Sonar Sweep

# %%
"Day 1" |> print

tests = """
199
200
208
210
200
207
240
269
260
263""".strip()

# %%
def solve_d01pt1(inp):
  """Solve Day 1 part 1."""
  inp = inp |> .split() |> map$(int)
  outp = pd.Series(inp).diff()[1:].astype(int).tolist()
  outp = outp |> filter$(it -> it > 0)
  return outp |> list |> len

# %%
expected = 7
result = solve_d01pt1(tests)
aoc.assert_msg("test solve day 1 part 1", result == expected) 

# %%
ins = aoc.read_file_to_str("./in/day01.in")
out = solve_d01pt1(ins)
f"day 1 part 1 output: {out}" |> print

# %%
"Day 1 part 2" |> print

# %%
def solve_d01pt2(inp):
  """Solve Day 1 part 2."""
  inp = inp |> .split() |> map$(int)
  outp = pd.Series(inp).rolling(3).sum().diff()[3:].astype(int).tolist()
  return outp |> filter$(-> _ > 0) |> list |> len

# %%
expected = 5
result = solve_d01pt2(tests)
aoc.assert_msg("test solve day 1 part 2", result == expected) 

# %%
out = solve_d01pt2(ins)
f"day 1 part 2 output: {out}" |> print

# %% [markdown]
# ## Day 2: Dive!

# %%
"Day 2" |> print

# %%
def iterate(pos, cmd):
  HPOS, DEPTH = 0, 1
  direct, val = cmd.split(" ")
  val = int(val)
  pos = pos.copy()
  case direct:
    match "forward":
      pos[HPOS] += val
    match "down":
      pos[DEPTH] += val
    match "up":
      pos[DEPTH] -= val
  return pos

def solve_d02pt1(inp):
  pos = [0, 0]
  for cmd in inp.splitlines():
    pos = iterate(pos, cmd)
  return pos |> reduce$(*)

tests = """
forward 5
down 5
forward 8
up 3
down 8
forward 2""".strip()

expected = 150
result = solve_d02pt1(tests)
aoc.assert_msg("test solve day 1 part 1", result == expected)

# %%
ins = aoc.read_file_to_str("./in/day02.in")
out = solve_d02pt1(ins)
f"day 2 part 1 output: {out}" |> print

# %%
"Day 2 part 2" |> print

# %%
def iterate2(pos, cmd):
  HPOS, DEPTH, AIM = 0, 1, 2
  direct, val = cmd.split(" ")
  val = int(val)
  pos = pos.copy()
  case direct:
    match "forward":
      pos[HPOS] += val
      pos[DEPTH] += pos[AIM] * val
    match "down":
      pos[AIM] += val
    match "up":
      pos[AIM] -= val
  return pos

def solve_d02pt2(inp):
  pos = [0, 0, 0]
  for cmd in inp.splitlines():
    pos = iterate2(pos, cmd)
  return pos[0:2] |> reduce$(*)

expected = 900
result = solve_d02pt2(tests)
aoc.assert_msg("test solve day 1 part 2", result == expected)

# %%
# `ins` remains the same
out = solve_d02pt2(ins)
f"day 2 part 2 output: {out}" |> print

# %% [markdown]
# ## Day 3: Binary Diagnostic

# %%
"Day 3" |> print

# %%
tests = """
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010
""".strip()

def T(lst):
  """Transpose a 2d list."""
  return [list(i) for i in zip(*lst)]  # transpose

def bitlist2int(bitlist):
  return int(str.join('', map(str, bitlist)), 2)

def solve_d03pt1(ins):
  lst = ins.splitlines()
  for idx in range(len(lst)):
    lst[idx] = map(int, list(lst[idx])) |> list
  l = len(lst)
  log.debug(lst)
  in_t = T(lst)
  log.debug(in_t)
  blst = []
  cblst = []
  for col in in_t:
    c0, c1 = col.count(0), l - col.count(0)
    if c0 > c1:
      i = 0
      c = 1
    else:
      i = 1
      c = 0
    blst.append(i)
    cblst.append(c)
  log.debug(blst)
  bnum = bitlist2int(blst)
  cnum = bitlist2int(cblst)
  log.debug([bnum, cnum])
  return bnum * cnum

expected = 198
log.setLevel(logging.INFO)
result = solve_d03pt1(tests)
aoc.assert_msg("test solve day 3 part 1", result == expected)

# %%
ins = aoc.read_file_to_str("./in/day03.in")
out = solve_d03pt1(ins)
f"day 3 part 1 output: {out}" |> print

# %%
"Day 3 part 2" |> print

# %%
def solve_d03pt2(ins):
  lst = ins.splitlines()
  for idx in range(len(lst)):
    lst[idx] = map(int, list(lst[idx])) |> list
  elemlen = len(lst[0])
  lstlen = len(lst)
  tlst = T(lst)
  log.debug(lst)
  log.info(f"elemlen={elemlen}, lstlen={lstlen}")
  olst = copy.deepcopy(lst)
  for i in range(elemlen):
    sm1 = tlst[i].count(1)
    sm0 = lstlen - sm1
    if sm1 >= sm0:
      trg = 1
    else:
      trg = 0
    log.debug(f"oxy iter-#{i} lstlen={lstlen} trg={trg}")
    lst = lst |> filter$(-> _[i] == trg) |> list
    tlst = T(lst)
    lstlen = len(lst)
    if lstlen <= 1:
      oxyrat_lst = lst[0]
      oxyrat = bitlist2int(oxyrat_lst)
      log.debug(f"oxyrat={oxyrat_lst} => {oxyrat}")
      break
  lst = olst
  tlst = T(olst)
  lstlen = len(lst)
  for i in range(elemlen):
    sm1 = tlst[i].count(1)
    sm0 = lstlen - sm1
    if sm1 >= sm0:
      trg = 0
    else:
      trg = 1
    log.debug(f"co2 iter-#{i} lstlen={lstlen} trg={trg}")
    lst = lst |> filter$(-> _[i] == trg) |> list
    tlst = T(lst)
    lstlen = len(lst)
    if lstlen <= 1:
      co2rat_lst = lst[0]
      co2rat = bitlist2int(co2rat_lst)
      log.debug(f"co2rat={co2rat_lst} => {co2rat}")
      break
  return oxyrat * co2rat

expected = 230
log.setLevel(logging.INFO)
result = solve_d03pt2(tests)
aoc.assert_msg("test solve day 3 part 2", result == expected)

# %%
out = solve_d03pt2(ins)
f"day 3 part 2 output: {out}" |> print

# %% [markdown]
# ## Day 5: Hydrothermal Venture

# %%
"Day 5" |> print

# %%
tests = """
0,9 -> 5,9
8,0 -> 0,8
9,4 -> 3,4
2,2 -> 2,1
7,0 -> 7,4
6,4 -> 2,0
0,9 -> 2,9
3,4 -> 1,4
0,0 -> 8,8
5,5 -> 8,2
""".strip()

# %%
def solve_d05pt1(ins):
  lines = ins.splitlines() |> map$(-> _.split(" -> ")) |> list
  for lnidx in range(len(lines)):
    for ptidx in range(2):
      lines[lnidx][ptidx] = lines[lnidx][ptidx].split(",") |> map$(int) |> list
  log.trace(lines)
  grid = defaultdict(int)
  for line in lines:
    ptst, pten = line
    if ptst[0] == pten[0]:  # horiz
      log.trace(f"horiz line {line}")
      x = ptst[0]
      for y in range(min(ptst[1], pten[1]), max(ptst[1], pten[1])+1):
        grid[tuple([x,y])] += 1
    elif ptst[1] == pten[1]:  # vert
      log.trace(f"vert line {line}")
      y = ptst[1]
      for x in range(min(ptst[0], pten[0]), max(ptst[0], pten[0])+1):
        grid[tuple([x,y])] += 1
    else:
      pass
  log.trace(grid)
  intersects = grid.values() |> filter$(-> _ > 1) |> list |> len
  log.debug(f"intersects-#={intersects}")
  return intersects

expected = 5
log.setLevel(logging.INFO)
result = solve_d05pt1(tests)
aoc.assert_msg("test solve day 5 part 1", result == expected)

# %%
ins = aoc.read_file_to_str("./in/day05.in")
out = solve_d05pt1(ins)
f"day 5 part 1 output: {out}" |> print

# %%
"Day 5 part 2" |> print

# %%
def scan_grid(lines):
  grid = defaultdict(int)
  for line in lines:
    ptst, pten = line
    if ptst[0] == pten[0] and ptst[1] == pten[1]:  # point
      grid[tuple(ptst)] += 1
    elif ptst[0] == pten[0]:  # horiz
      log.trace(f"horiz line {line}")
      x = ptst[0]
      for y in range(min(ptst[1], pten[1]), max(ptst[1], pten[1])+1):
        grid[tuple([x,y])] += 1
    elif ptst[1] == pten[1]:  # vert
      log.trace(f"vert line {line}")
      y = ptst[1]
      for x in range(min(ptst[0], pten[0]), max(ptst[0], pten[0])+1):
        grid[tuple([x,y])] += 1
    else:  # diagonal
      line = sorted(line, key=lambda it: it[0])
      ptst, pten = line
      if ptst[1] > pten[1]:
        ystp = -1
      else:
        ystp = 1
      log.trace(f"diag line {line}")
      y = ptst[1]
      for x in range(ptst[0], pten[0]+1):
        log.trace(f"set diag line-pt {[x,y]}") 
        grid[tuple([x,y])] += 1
        y += ystp
  log.trace(grid)
  return grid
  
def solve_d05pt2(ins):
  lines = ins.splitlines() |> map$(-> _.split(" -> ")) |> list
  for lnidx in range(len(lines)):
    for ptidx in range(2):
      lines[lnidx][ptidx] = lines[lnidx][ptidx].split(",") |> map$(int) |> list
  log.trace(lines)
  grid = scan_grid(lines)
  intersects = grid.values() |> filter$(-> _ > 1) |> list |> len
  log.debug(f"intersects-#={intersects}")
  #log.debug(f"grid={grid}")
  return intersects

expected = 12
log.setLevel(logging.INFO)
result = solve_d05pt2(tests)
aoc.assert_msg("test solve day 5 part 2", result == expected)

# %%
out = solve_d05pt2(ins)
f"day 2 part 2 output: {out}" |> print

# %% [markdown]
# ## Day 6: Lanternfish
# DE: [Nikolaus von Myra](https://de.wikipedia.org/wiki/Nikolaus_von_Myra)  \
# EN: [Saint Nicholas](https://en.wikipedia.org/wiki/Saint_Nicholas)  \
# ES: [NicolÃ¡s de Bari](https://es.wikipedia.org/wiki/Nicol%C3%A1s_de_Bari)

# %%
"Day 6" |> print

# %%
tests = "3,4,3,1,2"

# %%
def solve_d06pt1(ins, n):
  """Lanternfish, "brute force"."""
  cells = ins.split(",") |> map$(int) |> list
  log.trace(f"lfish={cells}")
  log.debug(f"lfish-num={len(cells)}")
  tms = time.time()
  for itr in range(n):
    log.debug(f"iter-#{itr} took {round(time.time()-tms, 2)}s len={len(cells)}")
    toappend = 0
    for idx in range(len(cells)):
      case cells[idx]:
        match 0:
          toappend += 1
          cells[idx] = 6
      else:
        cells[idx] -= 1
    cells = cells + [8] * toappend
    log.trace(f"iter#{itr} lfish={cells}")
  log.info(f"End iter-#{itr} took {round(time.time()-tms, 2)}s len={len(cells)}")
  return len(cells)

expected = [[18, 26], [80,5934]]
log.setLevel(logging.INFO)
for e in expected:
  n, expct = e
  result = solve_d06pt1(tests, n)
  aoc.assert_msg(f"test solve day 6 part 1; expect fish={expct} <= n={n} found {result}", result == expct)

# %%
ins = aoc.read_file_to_str("./in/day06.in")
out = solve_d06pt1(ins, 80)
f"day 6 part 1 output: {out}" |> print

# %%
"Day 6 part 2" |> print

# %%
def solve_d06pt2(ins, n):
  """Lanternfish, just keep counting cellstates-number."""
  tms = time.time()
  cells = ins.split(",") |> map$(int) |> list
  log.debug(f"lfish-num={len(cells)}")
  cellsts = []
  for idx in range(9):
    cellsts.append(cells.count(idx))
  log.debug(f"initial cellstates={cellsts}")
  for itr in range(n):
    toappend, cellsts = cellsts[0], cellsts[1:]
    assert len(cellsts) == 8, f"len={len(cellsts)}"
    cellsts[6] += toappend
    cellsts = cellsts + [toappend]
    if itr % 10 == 0:
      #log.info(f"iter-#{itr} count={sum(cellsts)}. cellstates={cellsts}. took {int(time.time()-tms)}s")
      log.debug(f"iter-#{itr} count={sum(cellsts)}. took {int(time.time()-tms)}s")
  log.info(f"iter-#{itr} ends. took {round(time.time()-tms, 4)}s")
  return sum(cellsts)

# %%
expected = [[256, 26984457539]]
log.setLevel(logging.INFO)
for e in expected:
  n, expct = e
  result = solve_d06pt2(tests, n)
  aoc.assert_msg(f"test solve day 6 part 1; expect fish={expct} <= n={n} found {result}", result == expct)

# %%
out = solve_d06pt2(ins, 256)
f"day 6 part 2 output: {out}" |> print

# %% [markdown]
# ## Day 7: The Treachery of Whales

# %%
"Day 7" |> print

# %%
tests = "16,1,2,0,4,2,7,1,2,14"

# %%
def solve_d07pt1(ins):
  """Day 7 pt1 solution."""
  ins = ins.split(",") |> map$(int) |> list
  mn, mx = min(ins), max(ins)
  fc_min = 1e20
  for trg in range(mn, mx+1):
    fc = 0
    for xpos in ins:
      fc += abs(xpos - trg)
    if fc < fc_min:
      log.debug(f"pos={trg}, new min fuelcost={fc}")
      fc_min = fc
  return fc_min

expected = 37
log.setLevel(logging.INFO)
result = solve_d07pt1(tests)
aoc.assert_msg(f"test solve day 7 part 1; expected={expct}, found {result}", result == expected)

# %%
ins = aoc.read_file_to_str("./in/day07.in")
out = solve_d07pt1(ins)
f"day 7 part 1 output: {out}" |> print

# %%
def solve_d07pt2(ins):
  """Day 7 pt2 solution."""
  ins = ins.split(",") |> map$(int) |> list
  mn, mx = min(ins), max(ins)
  fc_min = 1e20
  cst = 0
  seq = []
  for idx in range(0, mx+1): # costs per step
    seq.append(cst)
    cst += 1
  costseq = []
  for idx in range(0, mx+1): # costs for distance
    #log.debug(f"dst={idx} costseq={seq[0:idx+1]}")
    costseq.append(sum(seq[0:idx+1]))
  log.debug(seq)
  for trg in range(mn, mx+1):
    fc = 0
    fclst = []
    for xpos in ins:
      dist = abs(xpos - trg)
      fclst.append(costseq[dist])
      fc += costseq[dist]
    log.debug(f"  pos={trg}, fuelcosts={fclst}")
    if fc < fc_min:
      log.debug(f"pos={trg}, new min fuelcost={fc}")
      fc_min = fc
  return fc_min

expected = 168
log.setLevel(logging.INFO)
result = solve_d07pt2(tests)
aoc.assert_msg(f"test solve day 7 part 2; expected={expected}, found {result}", result == expected)

# %%
out = solve_d07pt2(ins)
f"day 7 part 2 output: {out}" |> print

# %% [markdown]
# ## Day 8: Seven Segment Search

# %%
"Day 8" |> print

# %%
segments = """ 
  0:      1:      2:      3:      4:
 aaaa    ....    aaaa    aaaa    ....
b    c  .    c  .    c  .    c  b    c
b    c  .    c  .    c  .    c  b    c
 ....    ....    dddd    dddd    dddd
e    f  .    f  e    .  .    f  .    f
e    f  .    f  e    .  .    f  .    f
 gggg    ....    gggg    gggg    ....

  5:      6:      7:      8:      9:
 aaaa    aaaa    aaaa    aaaa    aaaa
b    .  b    .  .    c  b    c  b    c
b    .  b    .  .    c  b    c  b    c
 dddd    dddd    ....    dddd    dddd
.    f  e    f  .    f  e    f  .    f
.    f  e    f  .    f  e    f  .    f
 gggg    gggg    ....    gggg    gggg
""".strip()
 
d = {
  0: ["a","b","c","e","f","g"],
  1: ["c","f"],
  2: ["a","c","d","e","g"],
  3: ["a","c","d","f","g"],
  4: ["b","c","d","f"],
  5: ["a","b","d","f","g"],
  6: ["a","b","d","e","f","g"],
  7: ["a","c","f"],
  8: ["a","b","c","d","e","f","g"],
  9: ["a","b","c","d","f","g"],
}

d2 = {
  1: ["c","f"],
  7: ["a","c","f"],
  4: ["b","c","d","f"],
  2: ["a","c","d","e","g"],
  3: ["a","c","d","f","g"],
  5: ["a","b","d","f","g"],
  0: ["a","b","c","e","f","g"],
  6: ["a","b","d","e","f","g"],
  9: ["a","b","c","d","f","g"],
  8: ["a","b","c","d","e","f","g"],
}

# %%
tests1 = """acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab | cdfeb fcadb cdfeb cdbaf""".strip()

tests = """
be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe
edbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc
fgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg
fbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb
aecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea
fgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb
dbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe
bdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef
egadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb
gcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce
""".strip()

# %%
def solve_d08pt1(ins):
  """Day 8 pt1 solution."""
  ins = ins.splitlines() # |> filter$(-> "|" not in _) |> list
  for idx in range(len(ins)):
    ins[idx] = ins[idx].split(" | ")[1]
  ct = 0
  for ln in ins:
    for grp in ln.split(" "):
      if len(grp) in [2, 4, 3, 7]:
        ct += 1
  log.trace([ins, ct])
  return ct

expected = 26
log.setLevel(logging.DEBUG)
#log.setLevel(logging.INFO)
result = solve_d08pt1(tests)
aoc.assert_msg(f"test solve day 8 part 1; expected={expected}, found {result}", result == expected)

# %%
ins = aoc.read_file_to_str("./in/day08.in")
out = solve_d08pt1(ins)
f"day 8 part 1 output: {out}" |> print

# %%
def solve_d08pt2(ins):
  """Day 8 pt2 solution."""
  return None

expected1 = 5353
expected = 61229
#log.setLevel(logging.DEBUG)
#log.setLevel(logging.INFO)
#result = solve_d08pt2(tests1)
#result = solve_d08pt2(tests)
#aoc.assert_msg(f"test solve day 7 part 2; expected={expected}, found {result}", result == expected)
"Day 8 pt2 solution - TBD." |> print

# %% [markdown]
# ## Day 9: Smoke Basin

# %%
"Day 9" |> print

tests = """
2199943210
3987894921
9856789892
8767896789
9899965678
""".strip()

# %%
def solve_d09pt1(ins):
  """Day 9 pt1 solution."""
  ins = ins.splitlines() |> map$(-> list(_)) |> list
  xdim , ydim = len(ins[0]), len(ins)
  for y in range(ydim):
    for x in range(xdim):
      ins[y][x] = int(ins[y][x])
  log.debug(f"grid[{xdim},{ydim}]...!")
  log.trace(f"grid[{xdim},{ydim}]")
  locminsum = 0
  for y in range(ydim):
    for x in range(xdim):
      pt = ins[y][x]
      nbs = aoc.get_neighbors(ins, x, y) |> filter$(-> _ != "") |> list
      #log.trace(f"pt[{x},{y}]={pt} neibs={nbs}")
      #all(flag == 0 for (_, _, flag) in items)
      if pt < min(nbs):
        log.trace(f"pt[{x},{y}]={pt} IS locmin, neibs={nbs}")
        locminsum += pt+1
  log.info(f"rc locminsum={locminsum}")
  return locminsum

expected = 15
log.setLevel(logging.DEBUG)
#log.setLevel(logging.INFO)
result = solve_d09pt1(tests)
aoc.assert_msg(f"test solve day 8 part 1; expected={expected}, found {result}", result == expected)

# %%
ins = aoc.read_file_to_str("./in/day09.in")
out = solve_d09pt1(ins)
f"day 9 part 1 output: {out}" |> print

# %%
"Day 9 part 2" |> print

def get_locmins(ins):
  xdim , ydim = len(ins[0]), len(ins)
  locmins = []
  for y in range(ydim):
    for x in range(xdim):
      pt = ins[y][x]
      nbs = aoc.get_neighbors(ins, x, y) |> filter$(-> _ != "") |> list
      #log.trace(f"pt[{x},{y}]={pt} neibs={nbs}")
      if pt != "" and pt < min(nbs):
        log.trace(f"pt[{x},{y}]={pt} IS locmin, neibs={nbs}")
        locmins.append( tuple([x,y]) )
  log.debug(f"rc locmins={locmins}")
  return locmins

def get_neib_coords(strlist: List[str], x: int, y: int) -> List[str]:
  """Get a list of 4 neighbors of cell. May return '' as element if boundary."""
  max_y_idx = len(strlist) - 1
  max_x_idx = len(strlist[0]) - 1
  nbs = []
  if y > 0:
    nbs.append(tuple([x, y-1]))
  if x > 0:
    nbs.append(tuple([x-1, y]))
  if y < max_y_idx:
    nbs.append(tuple([x, y+1]))
  if x < max_x_idx:
    nbs.append(tuple([x+1, y]))
  return nbs

def solve_d09pt2(ins):
  """Day 9 pt1 solution."""
  ins = ins.splitlines() |> map$(-> list(_)) |> list
  xdim , ydim = len(ins[0]), len(ins)
  for y in range(ydim):
    for x in range(xdim):
      val = int(ins[y][x])
      if val < 9:
        ins[y][x] = val
      else:
        ins[y][x] = 9
  log.debug(f"grid[{xdim},{ydim}]...!")
  log.trace(f"grid[{xdim},{ydim}]")
  basinsize_lst = []
  for lmin in get_locmins(ins):
    basin = set()
    to_scan = [lmin]
    minval = ins[lmin[1]][lmin[0]]
    while(len(to_scan)>0):
      pt = to_scan[0]
      basin.add(pt)
      to_scan = to_scan[1:]
      x,y = pt[0], pt[1]
      ptval = ins[y][x]
      nb_coords = get_neib_coords(ins, x, y)
      nb_coords = nb_coords |> filter$(-> _ not in basin and ins[_[1]][_[0]] != "" and ins[_[1]][_[0]] < 9) |> list
      nb_coords = nb_coords |> filter$(-> _ not in to_scan) |> list
      to_scan += nb_coords
      log.trace(f"trg-pt[{x},{y}]={ptval} len(toscan)={len(to_scan)}, nb-coords={nb_coords}")
    log.debug(f"lmin-pt[{lmin}]={minval} basin-len={len(basin)}")
    basinsize_lst.append(len(basin))
  basinsize_lst = sorted(basinsize_lst)
  log.debug(f"basinsize_lst={basinsize_lst}, {basinsize_lst[-3:]}")
  return reduce((*),basinsize_lst[-3:])

expected = 1134
#log.setLevel(logging.DEBUG)
log.setLevel(logging.INFO)
result = solve_d09pt2(tests)
aoc.assert_msg(f"test solve day 8 part 1; expected={expected}, found {result}", result == expected)

# %%
out = solve_d09pt2(ins)
f"day 9 part 2 output: {out}" |> print

# %% [markdown]
# ## Day 10: Syntax Scoring

# %%
"Day 10" |> print

tests = """
[({(<(())[]>[[{[]{<()<>>
[(()[<>])]({[<{<<[]>>(
{([(<{}[<>[]}>{[]{[(<()>
(((({<>}<{<{<>}{[]{[]{}
[[<[([]))<([[{}[[()]]]
[{[{({}]{}}([{[{{{}}([]
{<[[]]>}<{[{[{[]{()[[[]
[<(<(<(<{}))><([]([]()
<{([([[(<>()){}]>(<<{{
<{([{{}}[<[[[<>{}]]]>[]]
""".strip()

# %%
def solve_d10pt1(ins):
  """Day 10 pt1 solution."""
  minis = ["()", "[]", "{}", "<>"]
  closing = [")", "]", "}", ">"]
  scores = {")":3, "]":57, "}":1197, ">":25137}
  ins = ins.splitlines()
  score_sum = 0
  for ln in ins:
    #log.debug(f"ln={ln}")
    while any(s in ln for s in minis):
      ln = ln.replace("()", "").replace("[]", "").replace("{}", "").replace("<>", "")
    #log.debug(f"  reduced={ln}")
    if not any(s in ln for s in closing):
      #log.debug("  is ok/open ln")
      continue
    ln2 = ln
    ln2 = ln.replace("(", "").replace("[", "").replace("{", "").replace("<", "")
    breaking = ln2[0]
    score = scores[breaking]
    #log.debug(f"  breaks with score={score}")
    score_sum += score
  return score_sum

expected = 26397
log.setLevel(logging.DEBUG)
#log.setLevel(logging.INFO)
result = solve_d10pt1(tests)
aoc.assert_msg(f"test solve day 8 part 1; expected={expected}, found {result}", result == expected)

# %%
ins = aoc.read_file_to_str("./in/day10.in")
out = solve_d10pt1(ins)
f"day 10 part 1 output: {out}" |> print

# %%
def solve_d10pt2(ins):
  """Day 10 pt1 solution."""
  minis = ["()", "[]", "{}", "<>"]
  closing = [")", "]", "}", ">"]
  scores2 = {")":1, "]":2, "}":3, ">":4}
  matching = {"(": ")", "[": "]", "{": "}", "<": ">" }
  ins = ins.splitlines()
  score_sum = 0
  rcscores = []
  for ln in ins:
    #log.debug(f"ln={ln}")
    while any(s in ln for s in minis):
      ln = ln.replace("()", "").replace("[]", "").replace("{}", "").replace("<>", "")
    #log.debug(f"  reduced={ln}")
    if any(s in ln for s in closing):
      #log.debug("  is corrupt")
      continue
    score = 0
    while len(ln) > 0:
      c = ln[-1]
      ln = ln[:-1]
      score = score*5 + scores2[matching[c]]
      #log.trace(f"red-line={ln}, tmp-score={score}")
    #log.debug(f" score={score} for line")
    rcscores.append( score )
  l = len(rcscores)
  idx = l // 2
  rc = sorted(rcscores)[idx]
  #log.debug(f"rcscores rc={rc}, len={l}, median-idx={idx}, idx ar={rcscores}")
  return rc

expected = 288957
log.setLevel(logging.DEBUG)
#log.setLevel(logging.INFO)
result = solve_d10pt2(tests)
aoc.assert_msg(f"test solve day 8 part 1; expected={expected}, found {result}", result == expected)

# %%
out = solve_d10pt2(ins)
f"day 10 part 2 output: {out}" |> print

# %%
